AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Event-Driven Image Processing Workshop'

Resources:
  # S3 Buckets
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-edip-input'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-edip-output'



  # DynamoDB Table
  MetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-edip-metadata'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # SNS Topic
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-edip-notifications'

  # IAM Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-edip-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess

  # CloudWatch Log Groups
  InitialProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-edip-initial-processor'
      RetentionInDays: 7

  ResizeProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-edip-resize-processor'
      RetentionInDays: 7

  CaptionProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-edip-caption-processor'
      RetentionInDays: 7

  # Lambda Functions
  InitialProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-edip-initial-processor'
      Runtime: python3.12
      Handler: initial_processor.lambda_handler
      Code:
        S3Bucket: ssennett-lab-persistent
        S3Key: 2025/eventdrivenimageprocessing/lambdapackage.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          INPUT_BUCKET: !Ref InputBucket
          TABLE_NAME: !Ref MetadataTable
      Timeout: 30

  ResizeProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-edip-resize-processor'
      Runtime: python3.12
      Handler: resize_processor.lambda_handler
      Code:
        S3Bucket: ssennett-lab-persistent
        S3Key: 2025/eventdrivenimageprocessing/lambdapackage.zip
      Layers:
        - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p312-pillow:2
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          INPUT_BUCKET: !Ref InputBucket
          OUTPUT_BUCKET: !Ref OutputBucket
          TABLE_NAME: !Ref MetadataTable
      Timeout: 30

  CaptionProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-edip-caption-processor'
      Runtime: python3.12
      Handler: caption_processor.lambda_handler
      Code:
        S3Bucket: ssennett-lab-persistent
        S3Key: 2025/eventdrivenimageprocessing/lambdapackage.zip
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref OutputBucket
          TABLE_NAME: !Ref MetadataTable
      Timeout: 60

  # EventBridge Rule
  S3UploadRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref InputBucket
      State: ENABLED
      Targets:
        - Id: InitialProcessorTarget
          Arn: !GetAtt InitialProcessor.Arn

  # Permission for EventBridge to invoke Lambda
  InitialProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InitialProcessor
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3UploadRule.Arn

  ResizeProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ResizeProcessor
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ResizeRule.Arn

  # Resize Rule (disabled for extensibility demo)
  ResizeRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - edipworkshop.image.processor
        detail-type:
          - Image Uploaded
      State: DISABLED
      Targets:
        - Id: ResizeProcessorTarget
          Arn: !GetAtt ResizeProcessor.Arn

  # Optional Captioning Rule (commented out)
  # CaptioningRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     EventPattern:
  #       source:
  #         - edipworkshop.image.processor
  #       detail-type:
  #         - Processing Complete
  #     State: DISABLED
  #     Targets:
  #       - Id: CaptionProcessorTarget
  #         - Arn: !GetAtt CaptionProcessor.Arn

  # CaptionProcessorPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref CaptionProcessor
  #     Action: lambda:InvokeFunction
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt CaptioningRule.Arn

Outputs:
  InputBucketName:
    Description: 'Input S3 bucket name'
    Value: !Ref InputBucket
  OutputBucketName:
    Description: 'Output S3 bucket name'
    Value: !Ref OutputBucket
